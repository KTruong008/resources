!function(){"use strict";function e(e,n){return n={exports:{}},e(n,n.exports),n.exports}function n(e){if(!((e=String(e)).length>100)){var n=/^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(e);if(n){var r=parseFloat(n[1]);switch((n[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return r*u;case"days":case"day":case"d":return r*i;case"hours":case"hour":case"hrs":case"hr":case"h":return r*c;case"minutes":case"minute":case"mins":case"min":case"m":return r*a;case"seconds":case"second":case"secs":case"sec":case"s":return r*s;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return r;default:return}}}}function r(e){return e>=i?Math.round(e/i)+"d":e>=c?Math.round(e/c)+"h":e>=a?Math.round(e/a)+"m":e>=s?Math.round(e/s)+"s":e+"ms"}function o(e){return t(e,i,"day")||t(e,c,"hour")||t(e,a,"minute")||t(e,s,"second")||e+" ms"}function t(e,n,r){if(!(e<n))return e<1.5*n?Math.floor(e/n)+" "+r:Math.ceil(e/n)+" "+r+"s"}var s=1e3,a=60*s,c=60*a,i=24*c,u=365.25*i,l=function(e,t){t=t||{};var s=typeof e;if("string"===s&&e.length>0)return n(e);if("number"===s&&!1===isNaN(e))return t.long?o(e):r(e);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))},f=e(function(e,n){function r(e){var r,o=0;for(r in e)o=(o<<5)-o+e.charCodeAt(r),o|=0;return n.colors[Math.abs(o)%n.colors.length]}function o(e){function o(){if(o.enabled){var e=o,r=+new Date,t=r-(i||r);e.diff=t,e.prev=i,e.curr=r,i=r;for(var s=new Array(arguments.length),a=0;a<s.length;a++)s[a]=arguments[a];s[0]=n.coerce(s[0]),"string"!=typeof s[0]&&s.unshift("%O");var c=0;s[0]=s[0].replace(/%([a-zA-Z%])/g,function(r,o){if("%%"===r)return r;c++;var t=n.formatters[o];if("function"==typeof t){var a=s[c];r=t.call(e,a),s.splice(c,1),c--}return r}),n.formatArgs.call(e,s),(o.log||n.log||console.log.bind(console)).apply(e,s)}}return o.namespace=e,o.enabled=n.enabled(e),o.useColors=n.useColors(),o.color=r(e),"function"==typeof n.init&&n.init(o),o}function t(e){n.save(e),n.names=[],n.skips=[];for(var r=("string"==typeof e?e:"").split(/[\s,]+/),o=r.length,t=0;t<o;t++)r[t]&&("-"===(e=r[t].replace(/\*/g,".*?"))[0]?n.skips.push(new RegExp("^"+e.substr(1)+"$")):n.names.push(new RegExp("^"+e+"$")))}function s(){n.enable("")}function a(e){var r,o;for(r=0,o=n.skips.length;r<o;r++)if(n.skips[r].test(e))return!1;for(r=0,o=n.names.length;r<o;r++)if(n.names[r].test(e))return!0;return!1}function c(e){return e instanceof Error?e.stack||e.message:e}(n=e.exports=o.debug=o.default=o).coerce=c,n.disable=s,n.enable=t,n.enabled=a,n.humanize=l,n.names=[],n.skips=[],n.formatters={};var i}),d=e(function(e,n){function r(){return!("undefined"==typeof window||!window.process||"renderer"!==window.process.type)||("undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/))}function o(e){var r=this.useColors;if(e[0]=(r?"%c":"")+this.namespace+(r?" %c":" ")+e[0]+(r?"%c ":" ")+"+"+n.humanize(this.diff),r){var o="color: "+this.color;e.splice(1,0,o,"color: inherit");var t=0,s=0;e[0].replace(/%[a-zA-Z%]/g,function(e){"%%"!==e&&(t++,"%c"===e&&(s=t))}),e.splice(s,0,o)}}function t(){return"object"==typeof console&&console.log&&Function.prototype.apply.call(console.log,console,arguments)}function s(e){try{null==e?n.storage.removeItem("debug"):n.storage.debug=e}catch(e){}}function a(){var e;try{e=n.storage.debug}catch(e){}return!e&&"undefined"!=typeof process&&"env"in process&&(e=process.env.DEBUG),e}(n=e.exports=f).log=t,n.formatArgs=o,n.save=s,n.load=a,n.useColors=r,n.storage="undefined"!=typeof chrome&&void 0!==chrome.storage?chrome.storage.local:function(){try{return window.localStorage}catch(e){}}(),n.colors=["lightseagreen","forestgreen","goldenrod","dodgerblue","darkorchid","crimson"],n.formatters.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}},n.enable(a())});d("app:log");d.disable();var g=function(e){return"Hello, "+e+"!"}("Jason"),p=function(e){return e.reduce(function(e,n){return e+n},0)}([1,2,3,4]),m=document.getElementsByClassName("debug__output")[0];m.innerText="sayHelloTo('Jason') => "+g+"\n\n",m.innerText+="addArray([1, 2, 3, 4]) => "+p}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
